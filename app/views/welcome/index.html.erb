<!-- app/views/welcome/index.html.erb -->
<h1>Welcome to Condor</h1>
<p style='font-size: larger; color: orange; background-color: black; width: 60ex'>
  Condor has been made more secure.  When accessing CMVC source, it
  now requires that you use your own CMVC id.  It is suppose to trap
  and politely ask you if and when that need comes up.  I've tested
  this on my development and staging servers as best I can but I'm
  still nervous about it.  As usual, ping me if you see any problems.
</p>
<h3>Swinfo</h3>
<p style='width: 40em;'>
  Enter a defect, APAR, PTF, Lpp name (e.g. bos.rte) or Fileset
  (e.g. bos.rte 5.3.0.30 -- with the space.  The VRMF can be
  incomplete such as 5.3.8)
  <% form_tag swinfos_form_path do %>
    <%= text_field_tag "item" %>
    <%= submit_tag nil, :class => "concat-fields" %>
  <% end %>
</p>
<h3>Which Fileset</h3>
<p>
  Type in a file name or path
  <% form_tag which_filesets_form_path do %>
    <%= text_field_tag "path" %>
    <%= submit_tag nil, :class => "concat-fields" %>
  <% end %>
</p>
<h3>CMVC Activities</h3>
<table>
  <tr>
    <th>Retrive CMVC Defect</th>
    <td>
      <% form_tag :controller => "defects" do %>
        <%= text_field_tag "path" %>
        <%= submit_tag nil, :class => "concat-fields" %>
      <% end %>
    </td>
    <td>
      Enter a Defect Number
    </td>
  </tr>
  <tr>
    <th>View Changes for a CMVC Defect</th>
    <td>
      <% form_tag changes_form_path do %>
	<%= text_field_tag "path" %>
	<%= submit_tag nil, :class => "concat-fields" %>
      <% end %>
    </td>
    <td>
      Enter a Defect Number
    </td>
  </tr>
  <tr>
    <th>View Change History for a file</th>
    <td>
      <% form_tag file_changes_form_path do %>
	<%= text_field_tag "path" %>
	<%= submit_tag nil, :class => "concat-fields" %>
      <% end %>
    </td>
    <td>
      Enter a basename of a file e.g. jas.c
    </td>
  </tr>
</table>
<p>
  Condor is the CMVC / RP2 half of my web based tools to help with
  support work.  There are four to Condor.
  <dl style='width: 40em;'>
    <dt><span style='font-weight: bold'>swinfo data</span></dt>
    <dd>
      <p>
	As defects get built, a ptfapardef.constant file is maintained.
	This file relates PTFs, APARs, defects, Lpps, and vrmf levels.
      </p>
      <p>
	The PC in RP2 is created when an APAR is connected to a
	defect.  This is done before build time so it is the first
	(and most- official) place that connects APARs to defects.
	RP2 does not have "releases" (e.g. bos325, tcp53H) but has
	"versions" (e.g. 53H or 61D).  So, in some views, if the
	defect is not built, it will show the version rather than the
	release.
      </p>
      <p>
	Both the ptfapardef.constant files and PC Views from RP2 are
	pulled into Condor periodically.
      </p>
    </dd>
    <dt><span style='font-weight: bold'>Packaging data</span></dt>
    <dd>
      <p>
	The install images on truth stored in /530images, /520images,
	etc have been ransacked.  For a particular path on truth which
	goes to an install image, the list of packages, lpps, and
	filesets have been pulled out.  The list of files that each
	file set would apply can be listed.  The VRMF of the fileset
	has also been stored.  In effect, this is a which_fileset
	database but it knows what actually shipped and where -- not
	what was suppose to ship.
      </p>
      <p>
	The packages as well as each file have their SHA1 hash
	computed and stored.  This can be used to make sure the
	customers have the version of the file they should have.
      </p>
    </dd>
    <dt><span style='font-weight: bold'>CMVC.</span></dt>
    <dd>
      <p>
	The last piece is a few ties to CMVC to pull over Defects,
	source files, changes a defect made, diffs between the source
	files, and things like that.  Overwrite time, I plan to move
	my CMVC bash / perl scripts into this tool.
      </p>
    </dd>
  </dl>
</p>
